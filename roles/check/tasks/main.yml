---
- name: make temp directory
  command: mktemp -d
  register: mktemp

- name: create temp directory
  command: mktemp -d {{ mktemp.stdout }}/openshift-XXXXXXX
  register: mktemp
  changed_when: false

- name: create template folder
  file: path={{ mktemp.stdout }}/templates state=directory

- name: create test file folder
  file: path={{ mktemp.stdout }}/test state=directory

- name: get hostname
  command: hostname
  register: hostname

- name: copy admin config
  command: cp /etc/origin/master/admin.kubeconfig {{ mktemp.stdout }}/admin.kubeconfig
  changed_when: false

- name: check for not ready nodes
  shell: "oc get nodes --no-headers=true --config={{ mktemp.stdout }}/admin.kubeconfig | grep -v ' Ready' || true"
  register: notready

- name: not ready nodes
  debug:
    var: notready.stdout_lines

- name: check for scheduling disabled nodes
  shell: "oc get nodes --no-headers=true --config={{ mktemp.stdout }}/admin.kubeconfig | grep 'SchedulingDisabled' | awk '{ print $1 }'"
  register: schedulingdisabled

- name: scheduling disabled nodes
  debug:
    var: schedulingdisabled.stdout_lines

- name: validate master certificates
  shell: "{{ item }}"
  register: master_certs
  with_items:
    - "cat /etc/origin/master/ca.crt | openssl x509 -text | grep -i Validity -A2"
    - "cat /etc/origin/master/master.server.crt | openssl x509 -text | grep -i Validity -A2"
    - "cat /etc/origin/master/admin.crt | openssl x509 -text | grep -i Validity -A2"
    - "cat /etc/etcd/ca.crt | openssl x509 -text | grep -i Validity -A2"

- name: ca certificate
  debug:
    msg: "{{ master_certs.results | map(attribute='stdout_lines')| list }}"

- name: check etcd state
  shell: "/usr/bin/etcdctl --cert-file /etc/etcd/peer.crt --key-file /etc/etcd/peer.key --ca-file /etc/etcd/ca.crt -C https://{{ hostname.stdout }}:2379 cluster-health"
  register: etcdstate

- name: show etcd state
  debug:
    var: etcdstate.stdout_lines
  when: etcdstate.stdout | length > 0

- name: check default openshift-infra and logging projects for failed pods
  shell: oc get pods -o wide --no-headers=true --config={{ mktemp.stdout }}/admin.kubeconfig -n {{ item }} | grep -v " Running\|Completed" || true
  register: failed_pods
  with_items:
    - default
    - kube-system
    - kube-service-catalog
    - openshift-logging
    - openshift-infra
    - openshift-console
    - openshift-web-console
    - openshift-monitoring
    - openshift-node
    - openshift-sdn
  changed_when: false

- name: failed failedpods
  debug:
    msg: "{{ failed_pods.results |map(attribute='stdout_lines')|list }}"

- name: get container registry ip
  shell: "oc get svc docker-registry --config={{ mktemp.stdout }}/admin.kubeconfig -n default -o 'jsonpath={.spec.clusterIP}:{.spec.ports[0].port}'"
  register: registry_ip

- name: check container registry health
  uri:
    url: "https://{{ registry_ip.stdout }}/healthz"
    method: GET
    return_content: yes
    validate_certs: false
    status_code: 200
    timeout: 180

- name: check internal SysDNS resolution for cluster.local
  command: "nslookup {{ item }}"
  with_items:
    - "docker-registry.default.svc.cluster.local"
    - "docker-registry.default.svc"

- name: check external DNS upstream resolution
  command: "nslookup {{ item }}"
  with_items:
    - "www.google.com"
    - "www.google.co.uk"
    - "www.google.de"

- name: create test project
  command: oc new-project test --config={{ mktemp.stdout }}/admin.kubeconfig
  register: new_project
  failed_when: ('already exists' not in new_project.stderr) and ('Now using project' not in new_project.stdout)

- name: run test persistent volume
  include_tasks: pv.yml

- name: run test build
  include_tasks: build.yml

- name: delete test project
  command: oc delete project test --config={{ mktemp.stdout }}/admin.kubeconfig
  register: delete_project
  failed_when: ('deleted' not in delete_project.stdout)
  changed_when: ('deleted' in delete_project.stdout)

- name: delete temp directory
  file:
    name: "{{ mktemp.stdout }}"
    state: absent
  changed_when: false
